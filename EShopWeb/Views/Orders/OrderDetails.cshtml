@model List<OrderDetailViewModel>

 
<div>
    <div>
        <h5>@ViewData["Title"]</h5>
    </div>
</div>

<p><div asp-validation-summary="All" class="text-danger"></div></p>

@{
    await Html.RenderPartialAsync("_AngularGridUIScriptPartial");
}
<script type="text/javascript">

    myapp.controller("uigridCtrl", function ($scope, $timeout, $http, uiGridConstants) {
       
        $scope.linetotal = 0;
        $scope.gridOptions = {
            paginationPageSizes: [25, 50, 75],
            paginationPageSize: 25,
            columnDefs: [
                { field: 'ProductName', enableCellEdit: false, width: '35%', name: 'Product Name' },
                { field: 'UnitChartName', enableCellEdit: false, width: '15%', name: 'UnitChart Name' },
                {
                    field: 'Quantity', exporterPdfAlign: 'right',
                    width: '15%',
                    cellClass: 'gridcell-number-align',
                    enableCellEdit: false, enableCellEditOnFocus: false 
                },
                { field: 'SalesPrice', exporterPdfAlign: 'right', name: 'Unit Price', enableCellEdit: false, width: '15%', cellFilter: 'currencyFilter:this', cellClass: 'gridcell-number-align' },
                {
                    field: 'GetTotal()', exporterPdfAlign: 'right',
                    enableCellEdit: false, 
                    width: '15%',
                    footerCellTemplate: '<div class="ui-grid-cell-contents cellAlignRight gridcell-number-align">Total : {{grid.appScope.netTotal($event, row.entity) | currencyFilter:this}}</div>',// '<div class="ui-grid-cell-contents" >Total: {{col.getAggregationValue() | number:2 }}</div>',// '<div class="ui-grid-cell-contents gridcell-number-align">Total : {{grid.appScope.netTotal($event, row.entity) | currencyFilter:this}}</div>',
                    cellClass: 'gridcell-number-align',
                    name: 'Total',
                    cellFilter: 'currencyFilter:this',
                    aggregationType: uiGridConstants.aggregationTypes.sum 
                }
            ],
            onRegisterApi: function (gridApi) {
                $scope.grid1Api = gridApi;
                gridApi.selection.on.rowSelectionChanged($scope, function (row) {

                });                 
            },
            enableGridMenu: true,
            showGridFooter: true, 
            showColumnFooter: true,
            exporterMenuPdf: true,
            exporterMenuExcel: false,
            exporterCsvFilename: 'OrderDetails.csv',
            exporterPdfDefaultStyle: {
                fontSize: 9
            },
            exporterPdfTableStyle: {
                margin: [10, 10, 10, 10]                
            },
            exporterPdfTableHeaderStyle: {
                fontSize: 11,
                bold: true,
                italics: true,
                color: 'black',
                alignment: 'left'
            },
            exporterPdfHeader: {
                text: "Order",
                style: 'headerStyle'
            },
            exporterPdfFooter: function (currentPage, pageCount) {                 
                return {
                    text: currentPage.toString() + ' of ' + pageCount.toString(),
                    style: 'footerStyle'
                };
            },
            exporterPdfCustomFormatter: function (docDefinition) {
                docDefinition.styles.headerStyle = {
                    margin: [10, 10, 10, 10], 
                    fontSize: 22,
                    bold: true
                };
                docDefinition.styles.footerStyle = {
                    margin: [10, 10, 10, 10],
                    fontSize: 10, 
                    bold: true 
                };
                return docDefinition;
            },
            exporterPdfOrientation: 'portrait',
            exporterPdfPageSize: 'LETTER',
            exporterPdfMaxGridWidth: 500,
            exporterExcelCustomFormatters: function (grid, workbook, sheet, docDefinition) {
                const headerFormatter = docDefinition.styles['header'];
                let cols = [];
                cols.push({ value: 'Summary Report', metadata: { style: headerFormatter.id } });
                sheet.data.push(cols);
            },
            exporterCsvLinkElement: angular.element(document.querySelectorAll(".custom-csv-link-wareHouse"))
        };
 
        $scope.gridOptions.data = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model));
 
        $scope.updateEntity = function (column, row, cellValue) {
            row.entity[column.field] = cellValue;
        };

        angular.forEach($scope.gridOptions.data, function (row) {
            row.GetTotal = function () {
                return (this.Quantity * this.SalesPrice);
            };
        });

        $scope.netTotal = function ($event, entity) {
            var Tlinetotal = 0;
            angular.forEach($scope.gridOptions.data, function (row) {
                Tlinetotal += (row.Quantity * row.SalesPrice);
            });
            return Tlinetotal;
        };

    }).filter('currencyFilter', function () {
        let USDoller = new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD'
        });
        return function (value, scope) {
            return USDoller.format(value);
        };
    });
</script>

<style type="text/css">

    .myGrid {
        width: 100%;
        height: 555px;
    }

    .ui-grid-cell a {
        text-decoration: none;
    }

</style>
<div>
    <div ng-controller="uigridCtrl">
 
        <div ui-grid="gridOptions" ui-grid-pagination ui-grid-auto-resize ui-grid-edit ui-grid-cellNav ui-grid-selection ui-grid-exporter class="myGrid">
            <div class="gridwatermark" ng-show="!gridOptions.data.length">No data available</div>
        </div> 

    </div>
</div>
 